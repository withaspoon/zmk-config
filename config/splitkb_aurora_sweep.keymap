/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keys_sv.h"

#define L_DEFAULT 0
#define L_SYM 1
#define L_NUM 2
#define L_NAV 3

#define MOD_MORPH_MASKED(NAME, KEY, MOD_KEY) \
  mm_##NAME: mm_##NAME { \
    compatible = "zmk,behavior-mod-morph"; \
    label = #NAME; \
    #binding-cells = <0>; \
    bindings = <&kp KEY>, <&kp MOD_KEY>; \
    mods = <(MOD_LSFT|MOD_RSFT)>; \
    keep-mods = <(MOD_LSFT|MOD_RSFT)>; \
  };

#define MOD_MORPH(NAME, KEY, MOD_KEY) \
  mm_##NAME: mm_##NAME { \
    compatible = "zmk,behavior-mod-morph"; \
    label = #NAME; \
    #binding-cells = <0>; \
    bindings = <&kp KEY>, <&kp MOD_KEY>; \
    mods = <(MOD_LSFT|MOD_RSFT)>; \
  };

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        MOD_MORPH(semicolon, COMMA, SEMICOLON)
        MOD_MORPH(dot, DOT, COLON)
    };

    /*

    å = Hold down the Option key and type an a.
    Å = Hold down the Option and Shift keys and type an a.
    ä = Hold the Option key and type a u, release the keys, and type an a.
    Ä = Hold the Option key and type a u, release the keys, hold down the Shift key and type an a.
    ö = Hold the Option key and type a u, release the keys, and type an o.
    Ö = Hold the Option key and type a u, release the keys, hold down the Shift key and type an o.

    */

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp Q &kp W &kp F &kp P &kp B                                                   &kp J &kp L &kp U &kp Y &kp BSPC
            &kp A &hm LCTRL R &hm LALT S &hm LGUI T &kp G                                   &kp M &hm RGUI N &hm RALT E &hm RCTRL I &kp O
            &kp Z &kp X &kp C &kp D &kp V                                                   &kp K &kp H &mm_semicolon &mm_dot &kp MINUS
                &mt LC(LS(LALT)) SPC &sk LSHIFT                                             &key_repeat &to L_SYM
            >;
        };

        symbols {
            bindings = <
            &kp ESC &kp HASH &kp AT &kp DLLR &kp PRCNT                                      &kp LT &kp LBRC &kp RBRC &kp GT &kp BSPC
            &kp TAB &kp EQUAL &kp GRAVE &kp DQT &kp SQT                                     &kp QMARK &kp LPAR &kp RPAR &kp PIPE &kp ENTER
            &kp TILDE &kp CARET &kp AMPS &none &none                                        &none &kp LBKT &kp RBKT &kp SLASH &to L_NAV
                            &to L_DEFAULT &sk LSHIFT                                        &key_repeat &to L_NUM
            >;
        };

        numbers {
            bindings = <
            &kp ESC &none &none &none &none                                                 &kp PLUS &kp N1 &kp N2 &kp N3 &kp BSPC
            &kp TAB &none &kp BSLH &kp EXCL &none                                           &kp STAR &kp N4 &kp N5 &kp N6 &kp ENTER
            &none &none &none &none &none                                                   &kp N0 &kp N7 &kp N8 &kp N9 &to L_NAV
                    &to L_DEFAULT &sk LSHIFT                                                &key_repeat &to L_NUM
            >;
        };

        navigation {
            bindings = <
            &kp ESC &none &none &none &none                                                 &none &none &kp UP &none &kp BSPC
            &kp TAB &none &none &none &none                                                 &none &kp LEFT &kp DOWN &kp RIGHT &kp ENTER
            &none &none &none &none &none                                                   &none &none &none &none &none
                        &to L_DEFAULT &sk LSHIFT                                            &key_repeat &to L_SYM
            >;
        };
    };
};
